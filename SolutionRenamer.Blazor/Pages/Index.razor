@page "/"
@inject IRenamerService RenamerService

<div class="row">
    <div class="col-lg-8 col-md-12 m-auto">
        <div class="text-center">
            <h1 class="display-4">Solution Renamer</h1>
            <p>This tool can rename all contents of a .zip file and package it conveniently for your next project.</p>

            <TabControl @bind-ActivePage="SelectedTabPage">
                <TabPage Text="Upload" Selected="true">
                    <div class="form-group">
                        <label for="zipFile">Upload a .zip file</label>
                        <div class="custom-file">
                            <InputFile OnChange="HandleFileSelected" class="custom-file-input" />
                            <label class="custom-file-label" for="customFile">Choose file</label>
                        </div>
                        <small id="zipFileHelp" class="form-text text-muted">This must be a .zip file without a password</small>

                        @if (SelectedFile != null)
                        {
                            <div class="mt-3">
                                @if (IncorrectFileTypeUploaded)
                                {
                                    <p class="text-danger"><strong>The file selected is not a valid .zip file</strong></p>
                                }
                                <p><strong>@SelectedFile.Name</strong> (@(SelectedFile.Size / 1000)KB)</p>
                                <p>Content type: @SelectedFile.Type</p>
                            </div>
                        }

                    </div>
                </TabPage>
                <TabPage Text="Url">
                    <div class="form-group">
                        <label for="urlZip">URL to source .zip</label>
                        <input id="urlZip" type="text" class="form-control" placeholder="Enter URL" @bind="URL" />
                        <small id="urlZipHelp" class="form-text text-muted">This must be a publicly available archive</small>
                    </div>
                </TabPage>
                @*<TabPage Text="Git">
                        <div class="form-group">
                            <label for="urlGit">URL to source .git</label>
                            <input id="urlGit" type="text" class="form-control" placeholder="Enter .git URL" @bind="GitURL" />
                            <small id="urlGitHelp" class="form-text text-muted">This must be a publicly available repository</small>
                        </div>
                    </TabPage>*@
            </TabControl>

            <fieldset class="border py-2 px-4 mb-4">
                <legend class="w-auto px-2">Keywords</legend>

                <div class="form-row">
                    <div class="form-group col-5">
                        <small class="form-text text-muted">The keyword to look for</small>
                    </div>
                    <div class="form-group col-5">
                        <small class="form-text text-muted">The value to replace the keyword with</small>
                    </div>
                </div>

                <div class="form-row">
                    @foreach (var keyword in KeywordReplacements)
                    {
                        <div class="form-group col-5">
                            <input class="form-control" placeholder="Enter keyword" @bind="@keyword.Keyword" />
                        </div>
                        <div class="form-group col-5">
                            <input class="form-control" placeholder="Enter replacement" @bind="@keyword.ReplacementValue" />
                        </div>
                        <div class="form-group col-2">
                            <button class="btn btn-danger" @onclick="@(() => RemoveKeyword(keyword))">X</button>
                        </div>
                    }
                </div>
                <div class="form-group">
                    <button class="btn btn-primary" type="button" @onclick="AddKeyword">
                        New keyword
                    </button>
                </div>
            </fieldset>

            @if (!string.IsNullOrEmpty(ErrorText))
            {
                <div class="form-group mb-4">
                    <p class="text-danger"><strong>@ErrorText</strong></p>
                </div>
            }

            @if (IsGeneratingLink)
            {
                <button class="btn btn-primary btn-block" type="button" disabled>
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                    Loading...
                </button>
            }
            else if (CreateProjectResponse != null)
            {
                <a class="btn btn-primary btn-block" href="/file/@CreateProjectResponse.Id">Download</a>
                <small class="form-text text-muted">This link will expire on @CreateProjectResponse.ExpiryDate.ToString()</small>
            }
            else
            {
                <button class="btn btn-primary btn-block" type="button" @onclick="GenerateLink">
                    Create Project
                </button>
            }

        </div>
    </div>
</div>

@code {
    public string URL { get; set; }

    public string GitURL { get; set; }

    public List<KeywordReplacement> KeywordReplacements;

    bool IsGeneratingLink = false;

    bool GeneratedLink = false;

    UploadedFile CreateProjectResponse;

    TabPage SelectedTabPage { get; set; }

    IFileListEntry SelectedFile;

    bool IncorrectFileTypeUploaded = false;

    string ErrorText;

    void HandleFileSelected(IFileListEntry[] files)
    {
        SelectedFile = files.FirstOrDefault();
        if (SelectedFile.Type != "application/x-zip-compressed")
        {
            IncorrectFileTypeUploaded = true;
        }
        else
        {
            IncorrectFileTypeUploaded = false;
        }
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        KeywordReplacements = new List<KeywordReplacement>() { new KeywordReplacement() };
    }

    public async Task GenerateLink()
    {
        ErrorText = string.Empty;
        if (!KeywordReplacements.Any() || KeywordReplacements.Any(k => string.IsNullOrEmpty(k.Keyword) || string.IsNullOrEmpty(k.ReplacementValue)))
        {
            ErrorText = "Please enter at least 1 keyword replacement";
        }

        var selectedSource = GetSelectedSource(SelectedTabPage);

        if (selectedSource == SelectedProjectSourceEnum.File)
        {
            if (SelectedFile == null)
            {
                ErrorText = "Please upload a file";
            }
            if (IncorrectFileTypeUploaded)
            {
                ErrorText = "Please upload a valid .zip file";
            }
        }

        if (selectedSource == SelectedProjectSourceEnum.Git &&
           string.IsNullOrEmpty(GitURL))
        {
            ErrorText = "Please enter a source Git URL";
        }

        if (selectedSource == SelectedProjectSourceEnum.UrlZip &&
           string.IsNullOrEmpty(URL))
        {
            ErrorText = "Please enter a source .zip URL";
        }

        if (!string.IsNullOrEmpty(ErrorText))
        {
            return;
        }

        IsGeneratingLink = true;

        var response = await RenamerService.CreateProject(new CreateProjectRequest()
        {
            SelectedProjectSource = selectedSource,
            File = SelectedFile,
            KeywordReplacements = KeywordReplacements,
            GitUrl = GitURL,
            ZipUrl = URL
        });

        CreateProjectResponse = response;

        IsGeneratingLink = false;
        GeneratedLink = true;
    }

    public async Task AddKeyword()
    {
        KeywordReplacements.Add(new KeywordReplacement());
    }

    public void RemoveKeyword(KeywordReplacement keyword)
    {
        KeywordReplacements.Remove(keyword);
    }

    public SelectedProjectSourceEnum GetSelectedSource(TabPage tabPage)
    {
        if (tabPage.Text == "Url")
        {
            return SelectedProjectSourceEnum.UrlZip;
        }
        if (tabPage.Text == "Git")
        {
            return SelectedProjectSourceEnum.Git;
        }
        if (tabPage.Text == "Upload")
        {
            return SelectedProjectSourceEnum.File;
        }
        return SelectedProjectSourceEnum.Undefined;
    }

}
